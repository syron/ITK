@page "/schemadetails/{Id:int}"

@using KIT.Models;
@using KIT.Services;
@using TabBlazor.Services;

@inject SchemasService SchemasService
@inject HistoryEntriesService HistoryEntriesService
@inject IJSRuntime IJSRuntime
@inject IModalService ModalService

<PagePretitle>
    <a href="/schemas">Back to List of Schemas</a>
</PagePretitle>


    <TabBlazor.PageTitle>
        @_schema.Name
    </TabBlazor.PageTitle>


    <a href="/schemasupdate/@_schema.Id" class="btn btn-primary">Make some changes</a>


    <div class="row">
        <div class="col-8">

            <MonacoEditor @ref="_editor" Id="definition" OnDidInit="EditorOnDidInit" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptions" />

        </div>
        <div class="col-4">
            <h4>Example Data</h4>
            <Button @onclick="AddData" BackgroundColor="TablerColor.Primary">Add</Button>
            @if (_schema.ExampleDatas is not null)
            {
                <ul>
                    @foreach (var example in _schema.ExampleDatas)
                    {
                        <li><a @onclick="@(e => ViewData(example))">@example.Name</a></li>
                    }
                </ul>
            }
            else
            {
                <p>No example data provided yet...</p>
            }

            <h4>History</h4>

            @if (HistoryEntries is not null)
            {
                <ul>
                    @foreach (var historyEvent in HistoryEntries)
                    {
                        <li>
                            @historyEvent.Created.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss") -
                            @if (!string.IsNullOrWhiteSpace(historyEvent.Comment))
                            {
                                <span>@historyEvent.Comment</span>
                            }
                            else
                            {
                                <span>No comment</span>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No history</p>
            }
        </div>
    </div>

@code {

    [Parameter]
    public int Id { get; set; }

    private Schema? _schema = new Schema("", "");
    private List<HistoryEntry>? HistoryEntries;
    private string? _message;
    MonacoEditor? _editor { get; set; }

    private string? _language { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json"
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        _schema = await SchemasService.GetSchemaByIdAsync(Id);

        if (_schema is not null)
        {
            if (_schema.Definition is not null)
            {
                _editor.SetValue(_schema.Definition);
                Console.WriteLine(_schema.DataType.ToString());
                await MonacoEditorBase.SetModelLanguage(await _editor.GetModel(), _schema.DataType.ToString().ToLower());
            }

            _language = _schema.DataType.ToString();
            HistoryEntries = await HistoryEntriesService.GetAsync(Id, KITEntityType.Schema);
        }
    }

    protected async Task AddData()
    {
        _message = string.Empty;

        var component = new RenderComponent<SchemaAddDataComponent>().Set(e => e.SchemaId, Id);
        var result = await ModalService.ShowAsync("Give your schema some example data", component, new ModalOptions { Size = ModalSize.Large });

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled!");
        }
        else
        {
            Console.WriteLine("Modal as ok!");
        }
    }
    protected async Task ViewData(SchemaExampleData schemaExampleData)
    {
        _message = string.Empty;

        var component = new RenderComponent<SchemaViewDataComponent>().Set(e => e.SchemaId, Id).Set(e => e.schemaExampleData, schemaExampleData);
        var result = await ModalService.ShowAsync("Your example data", component, new ModalOptions { Size = ModalSize.Large });

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled!");
        }
        else
        {
            Console.WriteLine("Modal as ok!");
        }
    }
    }
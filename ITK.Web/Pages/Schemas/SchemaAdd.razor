@page "/schemas/add"

@using KIT.Models;
@using KIT.Services;
@using TabBlazor.Services;
@using ITK.Web.Models;

@inject SchemasService SchemasService;
@inject NavigationManager NavigationManager
@inject HistoryEntriesService HistoryEntriesService
@inject IJSRuntime IJSRuntime
@inject IModalService ModalService

<PagePretitle>
    <a href="/schemas">Back to List of Schemas</a>
</PagePretitle>
<TabBlazor.PageTitle>
    Create a new Schema
</TabBlazor.PageTitle>



@*

    <Modal @ref="modal" Title="Save Schema">
        <BodyTemplate>

            <label for="savecomment">Comment:</label>
            <textarea id="savecomment" class="form-control" @bind="saveComment"></textarea>

        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
            <Button Color="ButtonColor.Primary" @onclick="OnSaveModalClick">Save changes</Button>
        </FooterTemplate>
    </Modal> *@

<EditForm Model="schema" OnValidSubmit="HandleValidSubmit">
    <div class="row">
        <div class="col">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
    </div>
    <div class="row">
        <div class="col">


            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="schema.Name" />

            <label for="datatype">Datatype</label>
            <InputSelect id="datatype" class="form-control" @bind-Value="schema.DataType">
                @foreach (var e in Enum.GetNames(typeof(DataType)))
                {
                    <option value="@e">@e</option>
                }
            </InputSelect>

            <label for="description">Description</label>
            <InputTextArea class="form-control" id="description" @bind-Value="schema.Description" />

        </div>
        <div class="col-9">

            <label for="definition">Definition</label>
        
            <MonacoEditor @ref="_editor" Id="definition" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptions" />

        </div>
    </div>   


    <button type="submit" class="btn btn-primary">Save</button>

    <button type="button" class="btn btn-info" @onclick="OnGenerateSchema">Generate Schema</button>
    
</EditForm>

@code {
    private Schema schema = new(string.Empty, "Robert");
    private MonacoEditor _editor { get; set; }

    protected override void OnInitialized()
    {
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json"
        };
    }

    private async void OnGenerateSchema() 
    {
        var component = new RenderComponent<SchemaGenerateFromPayload>().Set(e => e.type, schema.DataType);
        var result = await ModalService.ShowAsync("Generate Schema from Payload", component, new ModalOptions { Size = ModalSize.Large });

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled!");
        }
        else
        {
            var generatedSchemaResult = (string)result.Data;
            await _editor.SetValue(generatedSchemaResult);
        }
    }

    private async void HandleValidSubmit()
    {
        var component = new RenderComponent<CommentAddComponent>();
        var result = await ModalService.ShowAsync("Save Schema", component, new ModalOptions { Size = ModalSize.Large });


        if (!result.Cancelled)
        {
            var commentResult = (CommentResult)result.Data;

            var addedSchema = await SchemasService.AddAsync(schema, commentResult.Message);


            NavigationManager.NavigateTo($"/schemadetails/{addedSchema.Id}");
        }
    }
}
// <auto-generated />
using System;
using KIT.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TabBlazor.Templates.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KIT.Models.HistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KITEntityId")
                        .HasColumnType("int");

                    b.Property<string>("KITEntitySerialized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KITEntityType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistoryEntries");
                });

            modelBuilder.Entity("KIT.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InSchemaId")
                        .HasColumnType("int");

                    b.Property<int>("MapType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutSchemaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InSchemaId");

                    b.HasIndex("OutSchemaId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("KIT.Models.Schema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schemas");
                });

            modelBuilder.Entity("KIT.Models.SchemaExampleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchemaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId");

                    b.ToTable("SchemaExampleDatas");
                });

            modelBuilder.Entity("KIT.Models.Map", b =>
                {
                    b.HasOne("KIT.Models.Schema", "InSchema")
                        .WithMany("InMaps")
                        .HasForeignKey("InSchemaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KIT.Models.Schema", "OutSchema")
                        .WithMany("OutMaps")
                        .HasForeignKey("OutSchemaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InSchema");

                    b.Navigation("OutSchema");
                });

            modelBuilder.Entity("KIT.Models.SchemaExampleData", b =>
                {
                    b.HasOne("KIT.Models.Schema", null)
                        .WithMany("ExampleDatas")
                        .HasForeignKey("SchemaId");
                });

            modelBuilder.Entity("KIT.Models.Schema", b =>
                {
                    b.Navigation("ExampleDatas");

                    b.Navigation("InMaps");

                    b.Navigation("OutMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
